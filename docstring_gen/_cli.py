# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/CLI.ipynb.

# %% auto 0
__all__ = ['gen']

# %% ../nbs/CLI.ipynb 2
from typing import *
from pathlib import Path
import importlib

import typer

from .docstring_generator import add_docstring_to_source

# %% ../nbs/CLI.ipynb 5
_app = typer.Typer()


@_app.command(
    help="This command reads a Jupyter notebook or Python file, or a directory containing these files, and adds docstrings to classes and methods that do not have them. It can be used to add missing docstrings to your codebase.",
)
def gen(
    path: str = typer.Argument(
        ".",
        help="The path to the Jupyter notebook or Python file, or a directory containing these files",
    ),
    prompt: Optional[str] = typer.Option(
        None,
        help="Text that will be given as input to the GPT-3 model to generate the docstring. If no text is provided, the docstring will be generated according to the Google Python Style Guide.",
    ),
    include_auto_gen_txt: bool = typer.Option(
        True,
        help="If set to True, a note indicating that the docstring was autogenerated by docstring-gen library will be added to the end.",
    ),
    recreate_auto_gen_docs: bool = typer.Option(
        False,
        "--force-recreate-auto-generated",
        "-f",
        help="If set to True, the autogenerated docstrings from the previous runs will be replaced with the new one.",
    ),
    model: str = typer.Option(
        "code-davinci-002",
        help="The name of the GPT-3 model to use for docstring generation.",
    ),
    temperature: float = typer.Option(
        0.2, help="The temperature parameter for the GPT-3 model."
    ),
    max_tokens: int = typer.Option(
        250, help="The maximum number of tokens to generate in the docstring."
    ),
    top_p: float = typer.Option(1.0, help="The top-p parameter for the GPT-3 model."),
    frequency_penalty: float = typer.Option(
        0.0, help="The frequency penalty parameter for the GPT-3 model."
    ),
    presence_penalty: float = typer.Option(
        0.0, help="The presence penalty parameter for the GPT-3 model."
    ),
    stop: List[str] = typer.Option(
        ["#", '"""'],
        help="A list of strings that, if encountered in the generated docstring, will cause generation to stop.",
    ),
    n: int = typer.Option(
        3, help="The number of completions to generate for each prompt."
    ),
) -> None:
    """Generates docstrings for Python files and Jupyter notebooks.

    Args:
        path: The path to the Jupyter notebook or Python file, or a directory containing these files.
        prompt: Text that will be given as input to the GPT-3 model to generate the docstring. If no text is provided, the docstring will be generated according to the Google Python Style Guide.
        include_auto_gen_txt: If set to True, a note indicating that the docstring was autogenerated by docstring-gen library will be added to the end.
        recreate_auto_gen_docs: If set to True, the autogenerated docstrings from the previous runs will be replaced with the new one.
        model: The name of the GPT-3 model to use for docstring generation.
        temperature: The temperature parameter for the GPT-3 model.
        max_tokens: The maximum number of tokens to generate in the docstring.
        top_p: The top-p parameter for the GPT-3 model.
    frequency_penalty: The frequency penalty parameter for the GPT

    !!! note

        The above docstring is autogenerated by docstring-gen library (https://github.com/airtai/docstring-gen)
    """

    try:
        add_docstring_to_source(
            path=path,
            prompt=prompt,
            include_auto_gen_txt=include_auto_gen_txt,
            recreate_auto_gen_docs=recreate_auto_gen_docs,
            model=model,
            temperature=temperature,
            max_tokens=max_tokens,
            top_p=top_p,
            frequency_penalty=frequency_penalty,
            presence_penalty=presence_penalty,
            stop=stop,
            n=n,
        )
    except Exception as e:
        typer.secho(e, err=True, fg=typer.colors.RED)
        raise typer.Exit(1)
